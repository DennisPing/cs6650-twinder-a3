// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

type Metrics_Expecter struct {
	mock *mock.Mock
}

func (_m *Metrics) EXPECT() *Metrics_Expecter {
	return &Metrics_Expecter{mock: &_m.Mock}
}

// GetThroughput provides a mock function with given fields:
func (_m *Metrics) GetThroughput() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Metrics_GetThroughput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThroughput'
type Metrics_GetThroughput_Call struct {
	*mock.Call
}

// GetThroughput is a helper method to define mock.On call
func (_e *Metrics_Expecter) GetThroughput() *Metrics_GetThroughput_Call {
	return &Metrics_GetThroughput_Call{Call: _e.mock.On("GetThroughput")}
}

func (_c *Metrics_GetThroughput_Call) Run(run func()) *Metrics_GetThroughput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Metrics_GetThroughput_Call) Return(_a0 uint64) *Metrics_GetThroughput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_GetThroughput_Call) RunAndReturn(run func() uint64) *Metrics_GetThroughput_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementThroughput provides a mock function with given fields:
func (_m *Metrics) IncrementThroughput() {
	_m.Called()
}

// Metrics_IncrementThroughput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementThroughput'
type Metrics_IncrementThroughput_Call struct {
	*mock.Call
}

// IncrementThroughput is a helper method to define mock.On call
func (_e *Metrics_Expecter) IncrementThroughput() *Metrics_IncrementThroughput_Call {
	return &Metrics_IncrementThroughput_Call{Call: _e.mock.On("IncrementThroughput")}
}

func (_c *Metrics_IncrementThroughput_Call) Run(run func()) *Metrics_IncrementThroughput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Metrics_IncrementThroughput_Call) Return() *Metrics_IncrementThroughput_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metrics_IncrementThroughput_Call) RunAndReturn(run func()) *Metrics_IncrementThroughput_Call {
	_c.Call.Return(run)
	return _c
}

// SendMetrics provides a mock function with given fields:
func (_m *Metrics) SendMetrics() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_SendMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMetrics'
type Metrics_SendMetrics_Call struct {
	*mock.Call
}

// SendMetrics is a helper method to define mock.On call
func (_e *Metrics_Expecter) SendMetrics() *Metrics_SendMetrics_Call {
	return &Metrics_SendMetrics_Call{Call: _e.mock.On("SendMetrics")}
}

func (_c *Metrics_SendMetrics_Call) Run(run func()) *Metrics_SendMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Metrics_SendMetrics_Call) Return(_a0 error) *Metrics_SendMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_SendMetrics_Call) RunAndReturn(run func() error) *Metrics_SendMetrics_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetrics(t mockConstructorTestingTNewMetrics) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
