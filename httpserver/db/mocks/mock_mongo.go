// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MongoDB is an autogenerated mock type for the MongoDB type
type MongoDB struct {
	mock.Mock
}

type MongoDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MongoDB) EXPECT() *MongoDB_Expecter {
	return &MongoDB_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *MongoDB) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MongoDB_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MongoDB_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MongoDB_Expecter) Connect(ctx interface{}) *MongoDB_Connect_Call {
	return &MongoDB_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MongoDB_Connect_Call) Run(run func(ctx context.Context)) *MongoDB_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MongoDB_Connect_Call) Return(_a0 error) *MongoDB_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDB_Connect_Call) RunAndReturn(run func(context.Context) error) *MongoDB_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with given fields: name
func (_m *MongoDB) Database(name string) *mongo.Database {
	ret := _m.Called(name)

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func(string) *mongo.Database); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// MongoDB_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MongoDB_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - name string
func (_e *MongoDB_Expecter) Database(name interface{}) *MongoDB_Database_Call {
	return &MongoDB_Database_Call{Call: _e.mock.On("Database", name)}
}

func (_c *MongoDB_Database_Call) Run(run func(name string)) *MongoDB_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MongoDB_Database_Call) Return(_a0 *mongo.Database) *MongoDB_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDB_Database_Call) RunAndReturn(run func(string) *mongo.Database) *MongoDB_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *MongoDB) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MongoDB_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MongoDB_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MongoDB_Expecter) Disconnect(ctx interface{}) *MongoDB_Disconnect_Call {
	return &MongoDB_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MongoDB_Disconnect_Call) Run(run func(ctx context.Context)) *MongoDB_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MongoDB_Disconnect_Call) Return(_a0 error) *MongoDB_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDB_Disconnect_Call) RunAndReturn(run func(context.Context) error) *MongoDB_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MongoDB) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MongoDB_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MongoDB_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MongoDB_Expecter) Ping(ctx interface{}) *MongoDB_Ping_Call {
	return &MongoDB_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MongoDB_Ping_Call) Run(run func(ctx context.Context)) *MongoDB_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MongoDB_Ping_Call) Return(_a0 error) *MongoDB_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDB_Ping_Call) RunAndReturn(run func(context.Context) error) *MongoDB_Ping_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMongoDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewMongoDB creates a new instance of MongoDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMongoDB(t mockConstructorTestingTNewMongoDB) *MongoDB {
	mock := &MongoDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
